#!/usr/bin/env python

"""
cd-hit-parse.py

Parse a CD-HIT cluster file into a Python dictionary and use Pandas to export
the parent-child cluster provenance to a TSV file.

Dependencies: pandas=1.5.1
Other package versions may work but are untested.
"""

__author__ = "Liam Brown"
__email__ = "liam.brown@inspection.gc.ca"
__license__ = "MIT"

import os
import re
import sys
import argparse
import pandas as pd

#-------------------------------------------------------------------------------
# parse_arguments()
#-------------------------------------------------------------------------------

def parse_arguments():
    """
    Parse command-line arguments.

    :returns args: List of parsed arguments.
    """

    parser = argparse.ArgumentParser(
        description = """
        Parse a CD-HIT cluster file into a Python dictionary and use Pandas to
        export the parent-child cluster provenance provenance to a TSV file.        
        """)

    # Required arguments
    required_args = parser.add_argument_group('Required')
    required_args.add_argument('-i', '--input', type = str, required = True,
        help = """
        Path to a cluster file ('.clstr') generated by CD-HIT.
        """)

    # Optional arguments
    optional_args = parser.add_argument_group('Optional')

    optional_args.add_argument('-o', '--output', type = str,
        default = 'cluster-provenance.tsv',
        help = """
        Path to output a tab-separated table of parent-child cluster 
        provenance.
        Default: 'cluster-provenance.tsv'
        """)

    # If no arguments provided:
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()
    return args

#-------------------------------------------------------------------------------
# Other functions
#-------------------------------------------------------------------------------

def read_clstr(clstr_file):
    """
    Parse the cluster file and create a dictionary with the sequences per
    cluster.

    :param clstr_file: Path to a cluster file generated by CD-HIT.
    :type clstr_file: str
    :returns clstr_dict: Dictionary of cluster parents as keys and cluster
    children as items.
    :rtype clstr_dict: dict
    """
    with open(clstr_file, 'r') as clstr_handle:

        clstr_dict = {}
        
        for line in clstr_handle:
            # Search for a line that describes either a parent or child of a
            # cluster
            if re.search("^\d+\t\d+aa, >[A-Z]{5}\d{4}\.\.\. .*", line):

                # If the line looks like a parent:
                if re.search("^\d+\t\d+aa, >[A-Z]{5}\d{4}\.\.\. \*", line):
                    parent = re.search("^\d+\t\d+aa, >([A-Z]{5}\d{4})\.\.\. \*", line).group(1)
                    # print(f"Parent: {parent}")
                    # Add parent
                    clstr_dict[parent] = []

                # If the line looks like a child:
                elif re.search("^\d+\t\d+aa, >[A-Z]{5}\d{4}\.\.\. at.*", line):
                    child = re.search("^\d+\t\d+aa, >([A-Z]{5}\d{4})\.\.\. at.*", line).group(1)
                    # print(f"Child: {child}")
                    # Add child to parent
                    clstr_dict[parent].append(child)

        return clstr_dict

def create_df(clstr_dict):
    """
    Arrange clstr_dict into a Pandas dataframe of two columns: parent and child.

    :param clstr_dict: Dictionary of cluster parents as keys and cluster
    children as items.
    :type clstr_dict: dict
    :returns df: Dataframe of cluster parent-child provenance.
    :rtype df: <class 'pandas.core.frame.DataFrame'>
    """

    df = pd.DataFrame()

    for parent, child_list in clstr_dict.items():

        if len(child_list) > 0:
            df_handle = pd.DataFrame({'parent': [parent] * len(child_list), 'child': child_list})

        else:
            df_handle = pd.DataFrame({'parent': [parent], 'child': ['NA']})
        
        # Join dataframes
        df = pd.concat([df, df_handle], axis = 0)

    return df

def write_df(df, output):
    """
    Write df to a TSV file.

    :param df: Dataframe of cluster parent-child provenance.
    :type df: <class 'pandas.core.frame.DataFrame'>
    """

    df.to_csv(output, sep = '\t', index = False)

#-------------------------------------------------------------------------------
# main()
#-------------------------------------------------------------------------------

def main(args):
    clstr_dict = read_clstr(clstr_file = args.input)
    df = create_df(clstr_dict)
    write_df(df, output = args.output)

#-------------------------------------------------------------------------------

if __name__ == '__main__':
    args = parse_arguments()
    main(args)